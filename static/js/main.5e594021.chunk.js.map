{"version":3,"sources":["hooks/use-infinite-scroll.tsx","api/ImageService.tsx","components/List.tsx","components/Spinner.tsx","App.tsx","hooks/use-debounce.tsx","serviceWorker.ts","index.tsx"],"names":["useInfiniteScroll","callback","useState","isFetching","setIsFetching","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","useEffect","addEventListener","removeEventListener","console","log","flickrAPI","apiKey","fetchImages","searchText","page","queryString","fetch","method","then","r","json","catch","error","List","arr","nrOfCols","data","list","reduce","acc","val","index","colIndex","push","map","col","key","className","photo","idx","farm","server","id","secret","title","imgUrl","getImgUrl","src","alt","data-testid","Spinner","App","searchTerm","setSearchTerm","debouncedSearchTerm","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebouncedValue","isFocused","setIsFocused","isSearching","setIsSearching","nextPage","setResults","results","photos","setPage","onChange","e","target","type","name","placeholder","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5e594021.chunk.js","sourcesContent":["//@ts-nocheck\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst useInfiniteScroll = (callback: Function) => {\r\n  const [isFetching, setIsFetching] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScroll);\r\n    return () => window.removeEventListener('scroll', handleScroll);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!isFetching) return;\r\n    callback(() => {\r\n      console.log('called back');\r\n    });\r\n  }, [isFetching]);\r\n\r\n  function handleScroll() {\r\n    if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || isFetching) return;\r\n    setIsFetching(true);\r\n  }\r\n\r\n  return [isFetching, setIsFetching];\r\n};\r\n\r\nexport default useInfiniteScroll;","const flickrAPI = `https://api.flickr.com/services/rest/`;\r\nconst apiKey = \"15b67c2a8b4288ff1fddf5eb56655cfb\";\r\n\r\nexport type Photo = {\r\n  farm: number;\r\n  id: string;\r\n  server: string;\r\n  owner: string;\r\n  secret: string;\r\n  title: string;\r\n};\r\n\r\nexport type PhotoResponse = {\r\n  photos: {\r\n    page: number,\r\n    pages: number,\r\n    perPage: number,\r\n    photo: Photo[],\r\n    total: string | number\r\n  }\r\n  stat: string\r\n}\r\n\r\nexport function fetchImages(searchText: string, page: number = 1): Promise<PhotoResponse> {\r\n  const queryString = `text=${searchText}&page=${page}&method=flickr.photos.search&safe_search=1&format=json&nojsoncallback=1&api_key=${apiKey}&content_type=1&is_getty=1`;\r\n  return fetch(`${flickrAPI}?${queryString}`, {\r\n    method: \"GET\",\r\n  })\r\n    .then((r) => r.json())\r\n    .catch((error) => {\r\n      console.error(error);\r\n      return [];\r\n    });\r\n}\r\n","import React from \"react\";\r\nimport { Photo } from \"../api/ImageService\";\r\n\r\nimport \"./List.scss\";\r\n\r\nconst groupByColumns = (arr: any[], nrOfCols: number) => {\r\n  return arr.reduce((acc, val, index) => {\r\n    const colIndex = index % nrOfCols;\r\n\r\n    if (!acc[colIndex]) {\r\n      acc[colIndex] = [];\r\n    }\r\n\r\n    acc[colIndex].push(val);\r\n    return acc;\r\n  }, []);\r\n};\r\n\r\ntype Props = {\r\n  data: Photo[];\r\n  isFetching?: boolean;\r\n};\r\n\r\nconst getImgUrl = (farm: number, server: string, id: string, secret: string) => `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`\r\n\r\nexport default function List({ data }: Props) {\r\n  const list = groupByColumns(data, 4).map((col: any, index: number) => {\r\n    return (\r\n      <div key={index} className=\"column\">\r\n        {col.map((photo: Photo, idx: number) => {\r\n          const { farm, server, id, secret, title } = photo;\r\n          const imgUrl = getImgUrl(farm, server, id, secret);\r\n          const imageEl = <img key={`${id}-${idx}`} src={imgUrl} alt={title} data-testid=\"flickr-img\"/>;\r\n\r\n          return imageEl;\r\n        })}\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return <div className=\"row list\">{list}</div>;\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./Spinner.scss\";\r\n\r\nexport default function Spinner() {\r\n  return <div className=\"loader\"></div>;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport useDebouncedValue from \"./hooks/use-debounce\";\r\nimport useInfiniteScroll from \"./hooks/use-infinite-scroll\";\r\nimport { fetchImages, Photo } from \"./api/ImageService\";\r\n\r\nimport List from \"./components/List\";\r\nimport Spinner from \"./components/Spinner\";\r\n\r\nimport \"./App.scss\";\r\n\r\nfunction App() {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const debouncedSearchTerm = useDebouncedValue(searchTerm, 500);\r\n\r\n  const [isFocused, setIsFocused] = useState(false);\r\n  const [isSearching, setIsSearching] = useState(false);\r\n  const [isFetching, setIsFetching] = useInfiniteScroll(fetchMoreListItems);\r\n\r\n  const [page, setPage] = useState(1);\r\n  const [results, setResults] = useState<Photo[]>([]);\r\n\r\n  function fetchMoreListItems() {\r\n    if (debouncedSearchTerm) {\r\n      const nextPage = page + 1;\r\n      fetchImages(debouncedSearchTerm, nextPage).then((data) => {\r\n        setResults([...results, ...data.photos.photo]);\r\n        setPage(nextPage);\r\n        //@ts-ignore\r\n        setIsFetching(false);\r\n      });\r\n    }\r\n  }\r\n\r\n  // fetch images effect\r\n  useEffect(() => {\r\n    setPage(1);\r\n    if (debouncedSearchTerm) {\r\n      setIsSearching(true);\r\n      fetchImages(debouncedSearchTerm).then((data) => {\r\n        setIsSearching(false);\r\n        setIsFocused(true);\r\n        setResults(data.photos.photo);\r\n      });\r\n    } else {\r\n      setResults([]);\r\n      setIsSearching(false);\r\n      setIsFocused(false);\r\n    }\r\n  }, [debouncedSearchTerm]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className={`row input-wrap ${isFocused ? \"focused\" : \"\"}`}>\r\n        <input\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n          type=\"text\"\r\n          name=\"searchText\"\r\n          placeholder=\"Type to search image gallery\"\r\n          data-testid=\"search-input\"\r\n        />\r\n        {(isSearching || !!isFetching) && <Spinner />}\r\n      </div>\r\n      <List data={results} isFetching={isSearching || !!isFetching} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { useState, useEffect } from 'react';\r\n\r\nexport default function useDebouncedValue(value: any, delay: any) {\r\n  const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n  useEffect(\r\n    () => {\r\n      const handler = setTimeout(() => {\r\n        setDebouncedValue(value);\r\n      }, delay);\r\n\r\n      return () => {\r\n        clearTimeout(handler);\r\n      };\r\n    },\r\n    [value, delay] \r\n  );\r\n\r\n  return debouncedValue;\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}